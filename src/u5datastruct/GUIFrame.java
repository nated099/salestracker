/**
    *          Individual Project 4
    *          Nathaniel Kerr
    *          3/15/2017
    *          Intermediate Java Programming II 
    *          (IT252_1701B_01)
    */  
package u5datastruct;

import com.sun.glass.events.KeyEvent;
import java.io.*;
import java.util.*;

class Representatives{
    String fName, lName, region, contact, pNumber, id, supplies, books, paper;
    public Representatives(String id, String fName, String lName, String pNumber, String region, String contact,  String supplies, String books, String paper){
        this.fName = fName;
        this.lName = lName;
        this.region = region;
        this.contact = contact;
        this.pNumber = pNumber;
        this.supplies = supplies;
        this.books = books;
        this.paper = paper;
        this.id = id;
    }
    public String RepReturn() {
        return ("ID: "+this.id+"\r\n"+"Name: "+this.fName+"\r\n"+this.lName+"\r\nPhone #:"+this.pNumber+"\r\nRegion: "+this.region+"\r\nContact Method: "+this.contact+"\r\nSales:\r\n$"+this.supplies+"\r\n$"+this.books+"\r\n$"+this.paper);
    }
    public String RepPrinter() {
        return (this.id+"\r\n"+this.fName+"\r\n"+this.lName+"\r\n"+this.pNumber+"\r\n"+this.region+"\r\n"+this.contact+"\r\n"+this.supplies+"\r\n"+this.books+"\r\n"+this.paper);
    }
}

public class GUIFrame extends javax.swing.JFrame {
    String fName, lName, region, contact;
    long pNumber, id;        //!!!!try long to account for ph number
    double supplies, books, paper;
    static int i = 0;
    static int errorHandle = 0;
    
    Representatives[] reps = new Representatives[25];
    /**
     * Creates new form GUIFrame
     */
    public GUIFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        reportArea = new javax.swing.JTextArea();
        fNameField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lNameField = new javax.swing.JTextField();
        idField = new javax.swing.JTextField();
        pNumField = new javax.swing.JTextField();
        paperField = new javax.swing.JTextField();
        suppliesField = new javax.swing.JTextField();
        booksField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        eButton = new javax.swing.JButton();
        sButton = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        emailRadio = new javax.swing.JRadioButton();
        phoneRadio = new javax.swing.JRadioButton();
        visitRadio = new javax.swing.JRadioButton();
        jLabel10 = new javax.swing.JLabel();
        northRadio = new javax.swing.JRadioButton();
        southRadio = new javax.swing.JRadioButton();
        eastRadio = new javax.swing.JRadioButton();
        westRadio = new javax.swing.JRadioButton();
        evButton = new javax.swing.JButton();
        dButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sales Representative Accounts");
        setBackground(new java.awt.Color(153, 255, 204));
        setResizable(false);
        setSize(new java.awt.Dimension(552, 352));

        reportArea.setEditable(false);
        reportArea.setColumns(20);
        reportArea.setRows(5);
        reportArea.setText("Fill out representative info completely.\n\nSubmit: Store sales rep information.\n\nEvaluate: Calles prior rep information \nfor bonus review. Qualified reps will be\nadded to a new list.\n\nExit: Close the program.");
        reportArea.setSelectedTextColor(new java.awt.Color(153, 153, 153));
        jScrollPane1.setViewportView(reportArea);

        fNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fNameFieldActionPerformed(evt);
            }
        });
        fNameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fNameFieldKeyPressed(evt);
            }
        });

        jLabel1.setText("Report");

        jLabel2.setText("First Name");

        jLabel3.setText("Last Name");

        lNameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                lNameFieldKeyPressed(evt);
            }
        });

        idField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                idFieldKeyPressed(evt);
            }
        });

        pNumField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                pNumFieldKeyPressed(evt);
            }
        });

        paperField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paperFieldActionPerformed(evt);
            }
        });
        paperField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                paperFieldKeyPressed(evt);
            }
        });

        suppliesField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                suppliesFieldKeyPressed(evt);
            }
        });

        booksField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                booksFieldKeyPressed(evt);
            }
        });

        jLabel4.setText("ID");

        jLabel5.setText("Phone Number");

        jLabel6.setText("Paper Sold $");

        jLabel7.setText(" Supplies Sold $");

        jLabel8.setText("Books Sold $");

        eButton.setText("Exit");
        eButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eButtonActionPerformed(evt);
            }
        });

        sButton.setText("Submit");
        sButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sButtonActionPerformed(evt);
            }
        });
        sButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                sButtonKeyPressed(evt);
            }
        });

        jLabel9.setText("Preferred Contact Method");

        emailRadio.setText("Email");
        emailRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailRadioActionPerformed(evt);
            }
        });
        emailRadio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                emailRadioKeyPressed(evt);
            }
        });

        phoneRadio.setText("Phone");
        phoneRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phoneRadioActionPerformed(evt);
            }
        });
        phoneRadio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                phoneRadioKeyPressed(evt);
            }
        });

        visitRadio.setText("Visit");
        visitRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                visitRadioActionPerformed(evt);
            }
        });
        visitRadio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                visitRadioKeyPressed(evt);
            }
        });

        jLabel10.setText("Region");

        northRadio.setText("North");
        northRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                northRadioActionPerformed(evt);
            }
        });
        northRadio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                northRadioKeyPressed(evt);
            }
        });

        southRadio.setText("South");
        southRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                southRadioActionPerformed(evt);
            }
        });
        southRadio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                southRadioKeyPressed(evt);
            }
        });

        eastRadio.setText("East");
        eastRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eastRadioActionPerformed(evt);
            }
        });
        eastRadio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                eastRadioKeyPressed(evt);
            }
        });

        westRadio.setText("West");
        westRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                westRadioActionPerformed(evt);
            }
        });
        westRadio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                westRadioKeyPressed(evt);
            }
        });

        evButton.setText("Evaluate");
        evButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                evButtonActionPerformed(evt);
            }
        });

        dButton.setText("Display");
        dButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(phoneRadio)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(emailRadio)
                                .addGap(18, 18, 18)
                                .addComponent(visitRadio))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(sButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(evButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addComponent(jLabel6)
                            .addComponent(jLabel8)
                            .addComponent(fNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(paperField, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(booksField, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(dButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(eButton)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(suppliesField, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(pNumField, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lNameField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jLabel5)
                                        .addComponent(jLabel7))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel10)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(eastRadio)
                                                .addComponent(northRadio))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(southRadio)
                                                .addComponent(westRadio)))))
                                .addContainerGap())))
                    .addComponent(jLabel1)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pNumField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(suppliesField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(paperField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(booksField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(emailRadio)
                                    .addComponent(visitRadio))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(phoneRadio))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabel10)
                                    .addGap(56, 56, 56))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(northRadio)
                                        .addComponent(southRadio))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(eastRadio)
                                        .addComponent(westRadio)))))
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(eButton)
                            .addComponent(sButton)
                            .addComponent(evButton)
                            .addComponent(dButton))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

 
    private void sButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sButtonActionPerformed
        // Submit button pressed
        errorHandle = 0;    //reset the error handling variable
        if((phoneRadio.isSelected() || visitRadio.isSelected() || emailRadio.isSelected()) && (westRadio.isSelected() || northRadio.isSelected() || southRadio.isSelected() || eastRadio.isSelected()) && !(fNameField.getText().isEmpty() || lNameField.getText().isEmpty() || idField.getText().isEmpty() || pNumField.getText().isEmpty() || paperField.getText().isEmpty() || suppliesField.getText().isEmpty() || booksField.getText().isEmpty())) {
            //If all required items are filled, proceed.
            fName = fNameField.getText();
            lName = lNameField.getText();
            
            //Attempting to assign variables to user input. If incorrect variable is given, user will be notified.
            try {   
            id = Long.parseLong(idField.getText());
            } catch(NumberFormatException e) {
                reportArea.append("\r\nID must be a number\r\n");
                errorHandle = 1;
            }
            try {
            pNumber = Long.parseLong(pNumField.getText());
            } catch(NumberFormatException e) {
                reportArea.append("\r\nPhone number must be a number\r\n");
                errorHandle = 1;
            }
            try {
            supplies = Double.parseDouble(suppliesField.getText());
            } catch(NumberFormatException e) {
                reportArea.append("\r\nSupplies sold must be a double\r\n");
                errorHandle = 1;
            }
            try {
            books = Double.parseDouble(booksField.getText());
            } catch(NumberFormatException e) {
                reportArea.append("\r\nBooks sold must be a double\r\n");
                errorHandle = 1;
            }
            try {
            paper = Double.parseDouble(paperField.getText());
            } catch(NumberFormatException e) {
                reportArea.append("\r\nPaper sold must be a double\r\n");
                errorHandle = 1;
            }
            
            //Assigning variables based on radio button selection
            if(northRadio.isSelected()) {
                region = "NORTH";
            }
            else if(southRadio.isSelected()) {
                region = "SOUTH";
            }
            else if(eastRadio.isSelected()) {
                region = "EAST";
            }
            else if(westRadio.isSelected()) {
                region = "WEST";
            }
            
            //Contact information updated to temporary storage variable
            if(phoneRadio.isSelected()) {
            contact = "Phone";
            }
            else if(visitRadio.isSelected()){
            contact = "Visit";
            }
            else if(emailRadio.isSelected()){
            contact = "Email";
            }
            if(i < 25 && errorHandle == 0) { //controller to allow only 25 representatives, and only proceed if there is no error in variable assignment
                reps[i] = new Representatives(Long.toString(id), fName, lName, Long.toString(pNumber), region, contact,Double.toString(supplies), Double.toString(books), Double.toString(paper));

                reportArea.append("\r\nNew Representative Added!\r\n");
                writeToFile(reps[i].RepPrinter());   //using method to write to the file
                
                //clearing fields for new entries
                fNameField.setText("");
                lNameField.setText("");
                idField.setText("");
                pNumField.setText("");
                paperField.setText("");
                suppliesField.setText("");
                booksField.setText("");
                westRadio.setSelected(false);
                southRadio.setSelected(false);
                eastRadio.setSelected(false);
                northRadio.setSelected(false);
                phoneRadio.setSelected(false);
                visitRadio.setSelected(false);
                emailRadio.setSelected(false);
                i++;
            }
        }
        else {  //if an entry is still needed to create sales rep
            reportArea.setText("Please fill in all information before \r\nproceeding.");
        }
    }//GEN-LAST:event_sButtonActionPerformed

    //given one string, representative information will be made written to a file
    public void writeToFile(String rep) {       
        //Retrieves the path to the users home folder. This folder contains Desktop, music, videos etc. 
        //For the purpose of simplicity this file will be placed on the user's desktop
        //File path = new File(System.getProperty("user.home"));
        //two file objects are created to easily append the path from System.getProperty to a string path
        File pathname = new File("salesrep.txt");
        if(!pathname.exists()){
            try {
                pathname.createNewFile();
            }
            catch (IOException e) {
                    reportArea.append("Failure to create file");
            }
        }
        try (BufferedWriter buffWrite = new BufferedWriter(new FileWriter(pathname))) {
            buffWrite.write(rep + "\r\n");
            buffWrite.close();
        }
        
        catch (IOException e){
            reportArea.append("Failure to initiate buffered writer");
        }
        
    }
    
    //Constructor for specified location as well as appending a desired string to a file for future use.
    public void writeToFile(String rep, String address) { 
            //File path = new File(System.getProperty("user.home"));
            File pathname = new File(address);
        if(!pathname.exists()){
            try {
                pathname.createNewFile();
            }
            
            catch (IOException e) {
                    reportArea.append("Failure to create file");
            }
        }
        try (BufferedWriter buffwrite = new BufferedWriter(new FileWriter(pathname, true))) {
            buffwrite.write(rep+"\r\n");
        }
        
        catch (IOException e){
            reportArea.append("Failure to initiate buffered writer");
        }
            
    }
    public String readFromFile(){
        //File path = new File(System.getProperty("user.home"));
        File pathname = new File("salesrep.txt");
        String iter, rep = "";
        String[] representative = new String[11];
        int i = 0, x = 0, y = 0;
        if(pathname.exists()){      //starts counter to ready the actual read of the file into a variable
            try (BufferedReader buffRead = new BufferedReader(new FileReader(pathname))) { //trying to create a buffered reader created to take input data from csv file, assuming it's in the location provided
                while ((iter = buffRead.readLine()) != null) {
                    i++;
                            }
            } catch (IOException e) {   //
                e.printStackTrace();
            }
            x = i; //determines starting point of the buffered reader writing to the string array
            i = 0;
            try (BufferedReader buffRead = new BufferedReader(new FileReader(pathname))) { //trying to create a buffered reader created to take input data from csv file, assuming it's in the location provided
                while ((iter = buffRead.readLine()) != null) {
                    if(i >= x - 9){
                        representative[y] = iter;
                        y++;
                    }
                    i++;
                    if(y == 9){
                        break;
                    }
                }
            } catch (IOException e) {   //
                e.printStackTrace();
            }
        rep = (representative[0]+"\r\n"+representative[1]+"\r\n"+representative[2]+"\r\n"+representative[3]+"\r\n"+representative[4]+"\r\n"+representative[5]+"\r\n"+representative[6]+"\r\n"+representative[7]+"\r\n"+representative[8]);    
        }    
        return rep;
    }
    public String readFromFile(String file){
        //File path = new File(System.getProperty("user.home"));
        File pathname = new File(file);
        String iter, rep = "";
        String[] representative = new String[11];
        int i = 0, x = 0, y = 0;
        if(pathname.exists()){      //starts counter to ready the actual read of the file into a variable
            try (BufferedReader buffRead = new BufferedReader(new FileReader(pathname))) { //trying to create a buffered reader created to take input data from csv file, assuming it's in the location provided
                while ((iter = buffRead.readLine()) != null) {
                    i++;
                            }
            } catch (IOException e) {   //
                e.printStackTrace();
            }
            x = i; //determines starting point of the buffered reader writing to the string array
            i = 0;
            try (BufferedReader buffRead = new BufferedReader(new FileReader(pathname))) { //trying to create a buffered reader created to take input data from csv file, assuming it's in the location provided
                while ((iter = buffRead.readLine()) != null) {
                    if(i >= x - 9){
                        representative[y] = iter;
                        y++;
                    }
                    i++;
                    if(y == 9){
                        break;
                    }
                }
            } catch (IOException e) {   //
                e.printStackTrace();
            }
        rep = (representative[0]+"\r\n"+representative[1]+"\r\n"+representative[2]+"\r\n"+representative[3]+"\r\n"+representative[4]+"\r\n"+representative[5]+"\r\n"+representative[6]+"\r\n"+representative[7]+"\r\n"+representative[8]);    
        }    
        return rep;
    }
    private void eButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eButtonActionPerformed
        // Exit button pressed
        System.exit(0); //Exits the program
    }//GEN-LAST:event_eButtonActionPerformed

    private void emailRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailRadioActionPerformed
        // if email is selected as a contact method, remove other radio selections within the category
        phoneRadio.setSelected(false);
        visitRadio.setSelected(false);
    }//GEN-LAST:event_emailRadioActionPerformed

    private void visitRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_visitRadioActionPerformed
        // if visit is selected as a contact method, remove other radio selections within the category
        phoneRadio.setSelected(false);
        emailRadio.setSelected(false);
    }//GEN-LAST:event_visitRadioActionPerformed

    private void phoneRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phoneRadioActionPerformed
        // if phone is selected as a contact method, remove other radio selections within the category
        emailRadio.setSelected(false);
        visitRadio.setSelected(false);
    }//GEN-LAST:event_phoneRadioActionPerformed

    private void northRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_northRadioActionPerformed
        // if north is selected as a region, remove other radio selections within the category
        westRadio.setSelected(false);
        southRadio.setSelected(false);
        eastRadio.setSelected(false);
    }//GEN-LAST:event_northRadioActionPerformed

    private void eastRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eastRadioActionPerformed
        // if east is selected as a region, remove other radio selections within the category
        westRadio.setSelected(false);
        southRadio.setSelected(false);
        northRadio.setSelected(false);
    }//GEN-LAST:event_eastRadioActionPerformed

    private void southRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_southRadioActionPerformed
        // if south is selected as a region, remove other radio selections within the category
        westRadio.setSelected(false);
        northRadio.setSelected(false);
        eastRadio.setSelected(false);
    }//GEN-LAST:event_southRadioActionPerformed

    private void westRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_westRadioActionPerformed
        // if west is selected as a region, remove other radio selections within the category
        northRadio.setSelected(false);
        southRadio.setSelected(false);
        eastRadio.setSelected(false);
    }//GEN-LAST:event_westRadioActionPerformed

    private void fNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fNameFieldActionPerformed
        //unused
    }//GEN-LAST:event_fNameFieldActionPerformed

    private void sButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sButtonKeyPressed
        //unused
    }//GEN-LAST:event_sButtonKeyPressed

//If key is pressed in this field, detect if it is enter key and hit submit
    private void fNameFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fNameFieldKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER) {
            sButton.doClick();
        }
    }//GEN-LAST:event_fNameFieldKeyPressed
    //If key is pressed in this field, detect if it is enter key and hit submit
    private void lNameFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lNameFieldKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER) {
            sButton.doClick();
        }
    }//GEN-LAST:event_lNameFieldKeyPressed
    //If key is pressed in this field, detect if it is enter key and hit submit
    private void idFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_idFieldKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER) {
            sButton.doClick();
        }
    }//GEN-LAST:event_idFieldKeyPressed
    //If key is pressed in this field, detect if it is enter key and hit submit
    private void pNumFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pNumFieldKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER) {
            sButton.doClick();
        }
    }//GEN-LAST:event_pNumFieldKeyPressed
    //If key is pressed in this field, detect if it is enter key and hit submit
    private void paperFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_paperFieldKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER) {
            sButton.doClick();
        }
    }//GEN-LAST:event_paperFieldKeyPressed
    //If key is pressed in this field, detect if it is enter key and hit submit
    private void suppliesFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_suppliesFieldKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER) {
            sButton.doClick();
        }
    }//GEN-LAST:event_suppliesFieldKeyPressed
    //If key is pressed in this field, detect if it is enter key and hit submit
    private void booksFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_booksFieldKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER) {
            sButton.doClick();
        }
    }//GEN-LAST:event_booksFieldKeyPressed
    //If key is pressed in this field, detect if it is enter key and hit submit
    private void emailRadioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_emailRadioKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER) {
            sButton.doClick();
        }
    }//GEN-LAST:event_emailRadioKeyPressed
    //If key is pressed in this field, detect if it is enter key and hit submit
    private void visitRadioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_visitRadioKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER) {
            sButton.doClick();
        }
    }//GEN-LAST:event_visitRadioKeyPressed
    //If key is pressed in this field, detect if it is enter key and hit submit
    private void phoneRadioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_phoneRadioKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER) {
            sButton.doClick();
        }
    }//GEN-LAST:event_phoneRadioKeyPressed
    //If key is pressed in this field, detect if it is enter key and hit submit
    private void northRadioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_northRadioKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER) {
            sButton.doClick();
        }
    }//GEN-LAST:event_northRadioKeyPressed

    private void southRadioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_southRadioKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER) {
            sButton.doClick();
        }
    }//GEN-LAST:event_southRadioKeyPressed

    private void eastRadioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_eastRadioKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER) {
            sButton.doClick();
        }
    }//GEN-LAST:event_eastRadioKeyPressed

    private void westRadioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_westRadioKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER) {
            sButton.doClick();
        }
    }//GEN-LAST:event_westRadioKeyPressed

    private void evButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_evButtonActionPerformed
        String rep = readFromFile("salesrep.txt");
        String[] spltString = rep.split("\r\n");
        String [] lines = new String[3];
        
        double supplies = 0, books = 0, paper = 0;
        int i = 0, x = 0;
        
        //If the file is empty, display a message notifying the user.
        if(rep.isEmpty()){
            reportArea.append("No representative found\r\n");
        }
        else {
            reportArea.append("\r\nRepresentative information called\r\n");
            //reportArea.append(rep);
            for(i=0;i<spltString.length;i++) {
                if(!(spltString[i].isEmpty()))          
                    if(i >=6&&x<=2) {
                        lines[i-6] = spltString[i];
                        x++;
                    }
            }
            //all doubles are parsed from a string that has all characters besides integers removed.
            supplies = Double.parseDouble(lines[0].replaceAll("[\\sa-zA-Z$:]", ""));
            books = Double.parseDouble(lines[1].replaceAll("[\\sa-zA-Z$:]", ""));
            paper = Double.parseDouble(lines[2].replaceAll("[\\sa-zA-Z$:]", ""));
            reportArea.append("\r\nRepresentative sales sum: $"+(books+paper+supplies)+"\r\n");
            
            if(supplies + books + paper >= 8000){
                writeToFile(rep, "stars.txt");          //WORKONIT APPEND APPEND APPEND
                reportArea.append("Representative added to stars list!\r\n");
            }
        }
    }//GEN-LAST:event_evButtonActionPerformed

    private void paperFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paperFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_paperFieldActionPerformed

    private void dButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dButtonActionPerformed
        File pathname = new File("stars.txt");
        int i = 1, x = 0, y = 0;//various counter variables for conditional and loop logic
        String iter;
        String[] representative = new String[9];    //Temporary line holder for stars.txt
        Collection<Representatives> starlist = new ArrayList<Representatives>();

        reportArea.setText(""); //clears reportArea for neatness
        
        if(pathname.exists()){      //starts counter to ready the actual read of the file into a variable
            try (BufferedReader buffRead = new BufferedReader(new FileReader(pathname))) { //trying to create a buffered reader created to take input data from csv file, assuming it's in the location provided
                while ((iter = buffRead.readLine()) != null) {
                    representative[x] = iter;   //building array with line read from file
                    x++;
                    if(i>0 && i%9==0){      //Only create new Representative object once all arrays have been filled
                            if(y>0)
                                reportArea.append("\r\n");
                        reportArea.append("\r\nStar Representative #"+(y+1)+"\r\n");     
                        Representatives stars = new Representatives(representative[0],representative[1],representative[2],representative[3],representative[4],representative[5],representative[6],representative[7],representative[8]); //Creating the representative object to add to the ArrayList
                        starlist.add(stars);    //New addition to ArrayList
                        reportArea.append(stars.RepReturn() + "\r\n"); //Writing to report area
                        x=0;    //resetting temporary array counter
                        y++;
                    }
                    i++;
                }
            } catch (IOException e) {   
                e.printStackTrace();
            }
            reportArea.setCaretPosition(0);     //resets the autoscrolling of caret in reportArea to the top
        }
    }//GEN-LAST:event_dButtonActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUIFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField booksField;
    private javax.swing.JButton dButton;
    private javax.swing.JButton eButton;
    private javax.swing.JRadioButton eastRadio;
    private javax.swing.JRadioButton emailRadio;
    private javax.swing.JButton evButton;
    private javax.swing.JTextField fNameField;
    private javax.swing.JTextField idField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField lNameField;
    private javax.swing.JRadioButton northRadio;
    private javax.swing.JTextField pNumField;
    private javax.swing.JTextField paperField;
    private javax.swing.JRadioButton phoneRadio;
    public javax.swing.JTextArea reportArea;
    private javax.swing.JButton sButton;
    private javax.swing.JRadioButton southRadio;
    private javax.swing.JTextField suppliesField;
    private javax.swing.JRadioButton visitRadio;
    private javax.swing.JRadioButton westRadio;
    // End of variables declaration//GEN-END:variables
}
